# ENCAPSULATION task

 
# 1.Define a class Person with private attributes __name and __age.


# class Person:
#     def __init__(self, name, age):
#         self.__name = name  
#         self.__age = age    

#     def get_name(self):
#         return self.__name

#     def set_name(self, name):
#         self.__name = name

#     def get_age(self):
#         return self.__age

#     def set_age(self, age):
#         self.__age = age

# person = Person("jai", 17)
# print(person.get_name())  
# print(person.get_age())   

# person.set_name("Jack")
# person.set_age(3)
# print(person.get_name())  
# print(person.get_age())   

  



# 2.Add getter methods to the Person class to access the private attributes __name and __age.


# class Person:
#     def __init__(self, name, age):
#         self.__name = name
#         self.__age = age
    
#     def getter_name(self):
#         return self.__name
    
#     def getter_age(self):
#         return self.__age

# person = Person("granny", 3000)
# print(person.getter_name())  
# print(person.getter_age())   



# 3.Add setter methods to the Person class to modify the private attributes __name and __age.

# class Person:
#     def __init__(self, name, age):
#         self.__name = name
#         self.__age = age
    
#     def setter_name(self):
#         return self.__name
    
#     def setter_age(self):
#         return self.__age

# person= Person("jack sparrow",123)
# print(person.setter_name())
# print(person.setter_age())

# .Define a class BankAccount with private attributes __account_number and __balance and encapsulate methods for deposit and withdrawal.

# class BankAccount():
#      def __init__(self,AccountNumber,Balance):
#           self.__AccountNumber = AccountNumber
#           self.__Balance       = Balance

#      def deposit(self,money):
#           if money >0:
#                self.__Balance += money
#                print("new balance: ")
#           else:
#                print("deposit should not be zero")
  
#      def withdraw(self,money):
#           if money >0:
#                self.__Balance-= money
#                print("new balance")
#           else :
#                print("withdraw amount must be greater than 0")    

#      def get_balance(self):
#         return self.__balance
    
#      def get_account_number(self):
#         return self.__account_number

# account = B("12345", 100.0)
# print("account")  
# print("balance")            

# account.deposit(50.0)     
# print("account") 

# account.withdraw(30.0)  
# print("balance")  

# account.withdraw(200.0)


# # Define a class Counter with a private class variable __count and encapsulate methods to access and modify it.








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































